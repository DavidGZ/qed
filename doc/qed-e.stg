@database "qed - An Editor"
@author "Christian Felsch"
@$VER: 4.53
@subject "Documentation/Editors"
@options "+z-s"

@node "Title"
@{U}Title                                                                 qed@{0}


@limage logo.img 32

                           An editor for ATARI
                              Version 4.53

                               started by
                             Tom Quellenberg
                              continued by
                            Christian Felsch

                          English hypertext by 
                              Guido Flohr


   @{U}Contents:@{0}

      Preface
      General, System-Requirements and Installation
      @{"What's New?" link "What's new?"}
      @{"Hints for Dialog Boxes" link "Hints for dialog boxes"}
      @{"Menu Functions" link "Menu functions"}
      @{"Hidden Functions" link "Hidden functions"}
      @{"Block Marking Functions" link "Block marking functions"}
      @{"Keystroke Commands" link "Keystroke commands"}
      @{"Tag Files" link "Tag file"}
      @{"Project Files" link "Project file"}
      Commandline
      Supported Protocols, Cookies and Environment
      First aid

@endnode

@pnode "Christian Felsch"
Contact:

Christian Felsch
Bevenser Weg 18
21079 Hamburg
Germany

email: felsch@tu-harburg.de
@endnode

@pnode "Guido Flohr"
Contact:

Guido Flohr
Grossherzog-Friedrich-Strasse 6
66111 SaarbrÅcken
Germany
Tel: +49 681 390 392  (arrgh, are you @{I}serious@{0}?)

      mailto:gufl0000@stud.uni-sb.de
      http://stud.uni-sb.de/~gufl0000

For comments on the english version of this document only!
@endnode


@node "Preface"
@{U}Preface                                                               qed@{0}

When Tom Quellenberg has ceased work on the development of his editor
in 1993 after the release of version 3.09, the sources were
maintained by Robert Irrgang.
Robert did a couple of minor improvements and published version
3.10û.  Unfortunately Robert's Atari met with severe hardware
problems that ended up in the entire sources of version 3.10û being
deleted.  He then sold his entire Atari equipment.  Besides owing to
professional circumstances he had to abandon the Atari for a machine
running OS/2.  Qed was an orphan.

I then contacted Tom and he decided:
   @{B}From version 3.09 qed (including sources) will be in the
   public domain!@{0}

Thus, both the program and the sources of version 3.09 may be copied
by everybody and may be freely distributed by bulletin board systems
etc.

Yet the Tom has prohibited the charge of a fee of whatever kind.

I - Christian Felsch - am the maintainer of the current version.  I
will also continue the development of qed in the future.  However,
everybody is welcome to support me, which is easily done, because I
always publish my versions with the complete sources.

If you are interested just drop me a message. In order to compile qed
you will need the latest version of Pure C and the following libraries
(all of them are freely available):

   ˘ MiNT-Lib PL 48 or newer
   ˘ GEM-Lib PL 37 or newer
   ˘ CF-Lib PL 11 or newer

My version of qed can be found at:

   ˘ Bulletin board systems
       Maus Hamburg (+49 40 53 89 70 13, "Gruppenprogrammteil" QED)
   ˘ Internet
       http://www.tu-harburg.de/~smcf1605/

@endnode


@node "General"
@{U}General information on qed                                            qed@{0}

qed is a text editor for all Atari computers that profits from features of
the graphical user interface GEM like dropdown menus, dialog boxes and
windows.  For the benefit of skilled users care had been taken that almost
the entire functionality can be achieved by the keyboard, too.

The main purpose of qed is the processing of source code documents, i. e.
for programming in all languages.  For the creation of somewhat longer
text documents qed also offers an automatic line wrapping mode.  Further
important features are real tabs, search functions (optionally with
pattern matching algorithms) and tag functions.

Of course you can also use qed to write letters and other texts.  However
the use of qed for these documents is suboptimal since desirable functions
for this purpose like justified paragraphs are not offered by qed.  For
these documents you should rather trust on other well-known software
products.

@alabel System-Requirements
@index System-Requirements

qed works on screen resolutions lower than 640x400 but the menu and some  
dialog boxes need 640x400 for displaying them completely!

qed had been succesfully tested on the following systems:

   ˘ TOS
   ˘ MagiC, MagiCMac, MagiCPC
   ˘ MiNT
   ˘ MultiTOS, N.AES
   ˘ Geneva
   ˘ STonX
   ˘ Tos2Win

@alabel Installation
@index Installation
The @{installation ignore} is more than simple. From version 3.97 on the
documentation exclusively consists of a hypertext in ST-Guide format,
included to the binary distributions (german base archive qed-XXX.lzh):

   CONVERT/       Tool for converting old 'default.qed' (version 3.97)
                  to new 'qed.cfg' (version 4).

   DRIVER/        A selection of printer drivers

   HYP/           English hypertext by Guido Flohr

   TAGS/          Sample tag files

   QED.APP        Executable file
   QED.RSC        Resource file
   QED.CFG        Default configuration file
   ICONS.RSC      Something for your icon selection

Non-german users also need the translated components of qed which 
are distributed in separate archives. You can find them on qed's WEB page!

To run qed you only need the executable file a configuration file.  These
should be usually installed in one subdirectory.  Resource files and the
default configuration file can also be installed somewhere else in the
file system (for further information cf. the node environment).

In order to use this hypertext as an online help you have to install
someplace that ST-Guide can find it.

@endnode


@node "What's new?"
@{U}History                                                               qed@{0}

@autorefoff
@{U}Version 4.53 (Sep 19 1999)@{0}

   ˘ Behaviour of Search (^F) and Again (^G) have been changed:
      - ^F opens the search dialog and paste the marked text into
        the search string edit field
      - ^G launchs a search with the marked text immediately.
      - ^G also works for 'search again'.
      - Shift-^F have been removed because ^G supports this function.
   ˘ Marked text regions can be dragged to other windows.
   ˘ Keyboard-remapping: Ctrl-(/) are also available via Shift-Ctrl-8/9.
   ˘ Now the popup for file extensions (local options) contains an entry 
     for the configuration dialog.
   ˘ You can turn off the auto-start of OLGA.
   ˘ Various bug fixes.

@{U}Version 4.52 (Nov 17 1998)@{0}

   ˘ qed now saves the file permitions/ownership (on MinixFS) when 
     saving a file.
   ˘ Shift-Search (Shift-^F) searches for the marked text region.
   ˘ 'Search for files' got an own menu item.
   ˘ D&D have been changed: if you hold down ALT when dragging 
     something to a text window a menu with various insert modes 
     pops up. Shift-Drag (insert path at cursor) have been removed 
     because the popup includes this function.
   ˘ Fore- and background color now adjustable.
   ˘ New search wildcard: '\@' at the beginning of search/replace 
     text ignores the '\'.
   ˘ Various bug fixes.
   
@{U}Version 4.51 (Aug 31 1998)@{0}

   ˘ Various bug fixes: german Umlaut conversion (HTML), DHST server 
     name, all-iconify, MagiC font selection.
   ˘ qed now checks the version of the resource file. 

@{U}Version 4.50 (Jul 31 1998)@{0}

   ˘ New function "Top cursor line"
   ˘ MiNT-Lib PL48.
   ˘ qed does'nt touch filenames (to-lower or to-upper) anymore.
     Now you can use german 'Umlaute' in file/pathnames again 
     (handled by old TOS as lower case in uppercase filenames?!) 
   ˘ Project-items can be dragged onto the trash can (AV server) to 
     delete them from the projekt.
   ˘ qed supports the multi-file-selection of the MagiC file selector
   ˘ Redesigned to use CF-Lib instead of MyDials.
     Dialogs, alerts, extern font- and file-selection now comes in 
     window (application-modal). Some dialog-functionality have been 
     changed, please read @{"Hints for dialog boxes" link "Hints for dialog boxes"}
   ˘ Split printer config into two seperated dialogs: one for the dayly
     printout and one for the global config (GDOS/GEMDOS).
     Remove the GDOS device popup, qed uses the first printer he founds
     (checking GDOS 21..30). If you need a more comfortable GDOS-config 
     please install WDIALOG :-)
   ˘ qed supports WDIALOG (fontselection and printer dialogs) and NVDI5.
   ˘ qed uses two additional configuration files: one for the WDIALOG 
     printer settings (pdlg.qed) and one for the screen-resolution-
     depended things like window sizes and positions, font and loaded 
     files.
   ˘ program files (*.prg, *.app, *.tos, *.ttp) opened as binary by 
     default. Besides you can specified up to six extensions which open 
     as binary by default, too.
   ˘ New dialog for specifying the extions for lokal options with up to
     18 local extensions. 
   ˘ Add a local option entry for 'Binary'

@autorefon   
   Older versions
 
@endnode
  

@node "Older versions"
@{U}News in older version                                                 qed@{0}

@autorefoff
@{U}Version 4.10 (Feb 19 1998)@{0}

   ˘ SE protocol 1.05 
   ˘ If a label name contains a ' ', it wasn't load correctly form config.
   ˘ Add a popup for relace text history. The look-up of the search 
     dialogs and popups redisigned.
   ˘ qed has now a sponsor :-) 
   ˘ qed uses a special version of the MyDials now, which contain only, 
     which qed really needs. Special function in the editfields no longer
     available.
   ˘ Bracket selection with doubleclick or ^TAB on special characters.
   ˘ Corrections for window-shading.
   ˘ With the window change (internal ^W) so far only texts were considered. 
     Even if projects are to be considered, shift key must be pressed with 
     ^W. 
   ˘ Don't jump to cursor when saving a file any more.
   ˘ Font selection cleared up. The qed own selection has removed and qed
     checks now for the following system extensions:
                 xFSL -> UFSL -> $$FONTSELECT -> fnts_do() (MagiC) 
   ˘ After a VA_START qed answers with a AV_STARTED
   ˘ Hopefully recovered the crash with the popups (local, history)
   ˘ Crash with tags longer than 260 characters recovered
   ˘ Now more problems with D&D and 'window change global'
   ˘ DHST now for files over menu, VA_START, D&D and from config
   ˘ Various small bugs fixed and some new inserted :-) 

@{U}Version 4.00 (Sep 23 1997)@{0}

   ˘ qed emulates input of special characters via ALT-XXX (ASCII value
     on keypad) if the OS lacks this feature.
   ˘ qed supports the DHST-protocol of SMU 7.01.
   ˘ In case a line is too long (> 1023) it will be wrapped into separate
     lines.  When saving, the wrapped lines will be joined into the 
     long line again, i.e. qed doesn't insert additional line breaks
     any longer.
     These lines are indicated with a paragraph symbol at the end of line.
   ˘ `Goto line' is now called `Go to' and you can specify not only
     a line number but also a column.
   ˘ The maximum line length is now 1023 instead of 255.  As a supplement
     qed now has a fully dynamic handling of the horizontal slider.
   ˘ Some first fixes for the line wrapping:
     - The documented bug concerning `Save as' fixed
     - When merging text qed will insert paragraph qed will insert a 
       paragraph symbol at the end of each line and lines that are
       too long will get wrapped (provided that you have activated
       `Format when loading').
   ˘ Linewise sorting.
   ˘ Switched to MiNT-Lib PL46. (MyDials for MiNT-Lib needed now!)
   ˘ Binary open, use at your own risk ;-)
   ˘ New time measuring for autosave.
   ˘ qed has learned to handle file name quoting (for spaces and 
     apostrophes (') in file names).
   ˘ Nicelines have replaced `--------' in menus.
   ˘ Window manager rewritten from the scratch.  In theory it is possible
     to load an infinite number of documents (if there wasn't a restriction 
     to 30 documents someplace else).
   ˘ MyDials 2.19.
   ˘ qed also searches $HOME/defaults for the config file.
   ˘ Error with Drag 'n Drop for directories:  Gemini sends them without a 
     trailing backslash '\' and qed can't find out that it is a directory 
     and not a regular file.
   ˘ Dialog "Tidy up" removed.  It has been replaced by three distinct
     menu entries.  The function for the window arrangement has been
     taken from the 7UP-sources. :-)
   ˘ Menu tree restructured, new title `Window'
   ˘ New global switches:  3D-Dialogs, MAC-like edit field selection
     (only show an effect after saving setup and restarting qed.
   ˘ MyDials 2.18.
   ˘ qed has now been linked with MT_AES.LIB.
   ˘ qed has taken a general cleanup.  The desktop and color icons have 
     been removed, other parts have been revised, there's but a 
     `human-readable' config file qed.cfg with a conversion tool for
     *.qed -> qed.cfg.
     As a result of these modifications qed now allocates 100K less 
     memory without documents loaded.
   ˘ NULL bytes get changed to spaces, otherwise the string routines
     get confused.  If a file contained null bytes, qed will will give
     you a warning about that.
   ˘ Various minor bug fixes.

@autorefon

@endnode

@node "Hints for dialog boxes"
@{U}Hints for Dialog Boxes                                                qed@{0}

@autorefoff

Since version 4.5 qed use the new @{CF-Lib link cflib.hyp/main} instead of the MyDials of 
Olaf Meisiek.
This new lib make dialogs available which based on the new object types 
of MagiC (rounded radio buttons, cross buttons, underlined titles, group 
frames and so on). If MagiC is not installed, the CF-Lib emulates the
new objects by drawing them as USERDEFs and emulates the MagiC shortcut 
mechanism.

Also the CF-Lib uses some advanced AES features without emulating them 
if there are not available. On N.AES and MagiC you got 3D optic (gray 
background, 'sinkable' buttons) but on TOS all dialogs came in flat 
black & white!

As mentioned the CF-Lib supports the MagiC shortcut evaluation. qed read
all shortcuts from the resource file, so everybody can change them to his
favorites. On N.AES the underlined shortcut character in EXIT buttons are
NOT visable because the lib does'nt emulate the 3D activator buttons, but
of cause you can use the shortcut!

Since version 4.5 qed's dialogs and alerts came in windows (aplication-
modal). If a dialog or alert is open qed stands still but you can switch
over to other applications.
The cancel button in dialog or alert boxes can be accessed via the
UNDO-key. The buttons in alert boxes can be accessed via the shortcuts
or F-keys: F1 for the first (left) button, F2 for the second and so on 
(like MagiC).
Some dialogs contains a HELP button which can be accessed via the HELP-
key for jumping into the online help.
If a dialog box uses popups, you can access a 'cycle'-function by mouse-
click on the text @{I}left@{0} of the popup or use the keyboard shortcut 
(the underlined character @{I}left@{0} of the popup).

There are two special ways for inserting text in editable text fields:
qed supports cut/copy/paste from/to GEM clipboard into text fields.
For this fucntion it is necessary to use the GEM clipboard (cf. @{Global link Global}).

Another goodie: Press the insert key and a box with the complete char
set will pop up. You can select a character and it will be inserted into
the text field. This allows you for example to search a string
containing special characters.


@autorefon

@endnode


@node "Menu functions"
@{U}Menu functions                                                        qed@{0}

   @{qed link "Menu qed"}  @{File link "Menu File"}  @{Edit link "Menu Edit"}  @{Window link "Menu Window"}  @{Search link "Menu Search"}  @{Special link "Menu Special"}  @{Options link "Menu Options"}  Shell

All functions can be invoked from the menu bar.  Only those entries are
selectable that can call a function that makes sense for the current
state.  E. g. you can only cut a block if you've marked one before.

@{U}Menu shortcuts@{0}
@index "Menu shortcuts"
You will find the keyboard shortcuts that let you call the function
without help of the mosue. qed reads the shortcuts from the resource,
so you can adjust them to you own favorites.
The following characters are allowed in shortcuts:

    ˘ All letters, numbers and special characters
    ˘ Functions keys F1 .. F10
    ˘ Key words DEL, ESC, HELP, HOME, INS, TAB, UNDO

Each shortcut can start with one or more 'modification key':

     for Shift
    ^ for Control
     for Alternate

@{U}Menu help@{0}
@index "Menu help"
If you hold down the control key when selecting a menu item with mouse 
click, qed jumps into the hypertext and shows the corresponding 
documentation. For this feature ST-GUIDE had to be installed!

@endnode


## *************************************************************************
##  qed
## *************************************************************************
@node "Menu qed"
@{U}qed                                                                   qed@{0}

This menu @{title ignore} contains an entry for calling a short program
info plus the entries of accessories.  When using MultiTOS you will also
find all other programs running parallel to qed.

   About qed...

@endnode

@node "About qed"
@{U}About qed...                                                          qed@{0}

If you like to know who has coded qed an which version you are working
with select this entry.  By the way: never forget to specify the version
number when submitting bug reports.

@endnode


## *************************************************************************
##  File
## *************************************************************************

@node "Menu File"
@{U}File                                                                  qed@{0}

This @{title ignore} contains all entries that you need for file I/O.

@box 3 19 16 0
   New text       ^N
   Open...        ^O
   Merge...       ^R
   New project    N
   Open binary... B
  @{G}-------------------@{0}
   Save           ^S
   Save as...     ^M
   Delete         ^D
   Last version   ^H
  @{G}-------------------@{0}
   Print...       ^P
   Info...        ^I
  @{G}-------------------@{0}
   Save & Quit    Q
   Quit           ^Q

@endnode


@node "New text"
@{U}New text                                                              qed@{0}

@autorefoff
Opens a new window "Unnamed #" ('#' = 1, 2, 3, ...).  This is the right
way to create a new text file.
@autorefon

@endnode


@node "Open"
@{U}Open...                                                               qed@{0}

@autorefoff
This menu item opens a file.  The file selector box will pop up and you
can choose either an existing file to open or a non-existing file which
will then be created.

qed distincts by the file extender whether you opened a project file
(extender .qpj) or a normal text file (every other or no extender).

If you open a file that contains null bytes they get replaced by spaces
and qed gives a warning.  If qed should process a binary without replacing
@autorefon
the null bytes open them via Open binary.

By default all program files ('prg', 'app', 'tos' and 'ttp') were opened 
automatically as binary.
At Global you can specified other extensions which were opened always as 
binary.

@{"Hidden function" link "Hidden functions" s-open}

@endnode


@node "Merge"
@{U}Merge...                                                              qed@{0}

@autorefoff
The selected file will be inserted at the current cursor position in the
current text.

When applied to an opened project you can search file names via a search
function and insert them into the project file.
@autorefon

@{"Hidden function" link "Hidden functions" s-merge}

@endnode


@node "New project"
@{U}New project                                                           qed@{0}

@autorefoff
This menu item will open a new project. An empty window titled "Unnamed"
will pop up.
@autorefon

@endnode


@node "Open binary"
@{U}Open binary...                                                        qed@{0}

If a file gets opened with this menu entry qed will never convert any
line breaks or the like.  The data gets interpreted as a text with a
fixed line length (-> Global).

@{B}Warning:@{0}
   If you want to modify programs with this function you should really
   know what you are doing!

@endnode


@node "Save"
@{U}Save                                                                  qed@{0}

The corresponding text of the current window will be saved under the
name you have loaded it before.  Should the text still be called
"Unnamed" the function Save as is automatically invoked.

@endnode


@node "Save as"
@{U}Save as...                                                            qed@{0}

@autorefoff
A text, or a block, or a project will be saved under a new name.
If a block is selected, saving is applied to the contents of this
block only.

Before overwriting an existing file, you will be warned.
@autorefon

@endnode


@node "Last version"
@{U}Last version                                                          qed@{0}

@autorefoff
This operation will undo all modifications since your last saving of the
current file.  qed will abandon the current text in memory and reload it.
@autorefon

@endnode


@node "Delete"
@{U}Delete                                                                qed@{0}

Choosing this menu item will remove a text or project from memory.
Should the selected window contain unsaved modifications you'll get
a last chance to save it.

If file names are selected in a project these files are removed from
the project.

@endnode


@node "Print"
@{U}Print...                                                              qed@{0}

In this dialog you can configure the 'dayly' print out. For the global 
printer configuration see Printer.
Besides from selecting the appropriate driver you can change the
following parameters:

   ˘ Range:         What do you want to print? The entire text or the
                    selected block only?
   ˘ Line numbers:  qed will insert a line number in front of every line.
   ˘ Page numbers:  qed will apply page numbers to every sheet and
                    insert a header with consisting of file name and
                    date.
   ˘ Form feed:     qed will send a form feed after the last page.
   ˘ Check printer: Do you want qed to check if the printer is ready?
                    Under normal circumstances it shouldn't cause any
                    problems if you keep this switch turned on.  You
                    should only disable it when your printer is neither
                    connected to the parallel nor the serial port (e. g.
                    an Atari laser printer at the ACSI port or an Apple
                    printer under MagiCMac).  In these special cases it
                    might be possible that qed fails to detect the
                    printer being ready.
   ˘ Left margin:   qed will insert the appropriate number of spaces in
                    front of every line.

Choosing OK accepts the selected parameters, without printing anything.
(Yes, you're right, click on ``print'' to print!)

If you have installed WDIALOG and activated the setting 'Ext. printer 
dialog' (-> Global), qed uses the dialogs for the printer configuration. 
Then qed adds a sub-dialog to WDIALOG where the descripted settings can
be done. The options 'Form feed' and 'Check printer' are not available 
in the WDIALOG because both features handled by the GDOS driver (NVDI).
 
@endnode


@node "Info"
@{U}Info...                                                               qed@{0}

@autorefoff
You will see some information about the various windows.

   ˘ With no window being opened you will get information about qed itself.
     (It's the same like selecting ``About qed...'').
   ˘ If a text is active you will get information like file name, length in
     bytes and the selected line terminator.  The latter can be changed
     here.  You can choose Atari (CRLF), Unix (LF only), or Mac (CR only).
   ˘ If you have selected a block you will get information like the file
     name of the text it belongs to and the number of marked bytes
     respectively lines.
   ˘ If the topmost window is a project window, you will see the project
     info that consists of the file name, its date and the number of
     files in the project.
     If you click on the button labeled 'Scan' you will see the number of
     lines and size in bytes of all files in the project.
@autorefon

@endnode


@node "Save & Quit"
@{U}@{"Save & Quit" ignore}                                                        qed@{0}

@autorefoff
Quits qed after saving all modified text files.
@autorefon

@{"Hidden function" link "Hidden functions" s-quit}

@endnode


@node "Quit"
@{U}Quit                                                                  qed@{0}

@autorefoff
Before quitting you will be prompted for every modified text whether you
want to save it or not.
@autorefon

@{"Hidden function" link "Hidden functions" s-quit}

@endnode


## *************************************************************************
##  Edit
## *************************************************************************

@node "Menu Edit"
@{U}Edit                                                                  qed@{0}

This @{title ignore} contains several functions for text editing.

@box 3 20 21 0
   Undo          UNDO
  @{G}--------------------@{0}
   Cut             ^X
   Copy line       ^C
   Paste           ^V
  @{G}--------------------@{0}
   Select block    ^B
   Select all      ^A
  @{G}--------------------@{0}
   Format paragraph
   Swap characters ^T
  @{G}--------------------@{0}
   Shift left      ^J
   Shift right     ^K
  @{G}--------------------@{0}
   Sort            S
  @{G}--------------------@{0}
   UPPER<=>lower   ^~
   All to UPPER    ^+
   All to lower    ^-
   Capitalize      ^'

@endnode


@node "Undo"
@{U}Undo                                                                  qed@{0}

@autorefoff
This function will try to undo the last action you have performed in case
it only happened by accident or the result doesn't meet your intentions.

You can only undo your very last action and unfortunately not every
possible one!

You can apply 'Undo' to operations like delete line, delete block, cut or
paste.  This will reestablish the state of the text before the operation
took place.  'Search & Replace' can also be undone but of multiple
replacements only the last one is affected.
If none of the above mentioned operations were performed immediately
before, the current line is considered as undo-target, i. e. the last
written line will be deleted resp. restored.

It might be worth mentioning that 'Undo' itself can be undone, too.  If
you delete a line, selecting 'Undo' will make it reappear, another 'Undo'
will make it disappear again, and so on...
@autorefon

@endnode


@node "Cut"
@{U}Cut                                                                   qed@{0}

@autorefoff
Cut will delete the selected block in the current window and move it to
the clipboard.  The former contents of the clipboard will be lost after
it.
@autorefon

@{"Hidden function" link "Hidden functions" s-clipboard}

@endnode


@node "Copy line"
@index "Copy"
@{U}Copy line/Copy                                                        qed@{0}

@autorefoff
The current line will be copied to the clipboard.  In case you have
selected a block, only the block will be copied to the clipboard.
@autorefon

@{"Hidden function" link "Hidden functions" s-clipboard}

@endnode


@node "Paste"
@{U}Paste                                                                 qed@{0}

@autorefoff
This function inserts the clipoard's contents at the current cursor
position.
@autorefon

@endnode


@node "Select block"
@{U}Select block                                                          qed@{0}

Toggles marking mode for cursor motion.  The function isn't available if
block marking with the CTRL-key is switched on.

@endnode


@node "Select all"
@{U}Select all                                                            qed@{0}

With this function you can mark the entire text of the current window as
a block.

@endnode


@node "Format paragraph"
@{U}Format paragraph                                                      qed@{0}

@autorefoff
This function re-formats a paragraph by filling up lines that are not
completely filled and wrapping long lines at the appropriate positions.
@autorefon

@{"Hidden function" link "Hidden functions" s-wrap}

@endnode


@node "Swap characters"
@{U}Swap characters                                                       qed@{0}

@autorefoff
The characters left and right of the cursor are swapped.  The function
cannot be invoked when a block is marked and the topmost window is a text
window.
@autorefon

@endnode


@node "Shift left"
@{U}Shift left                                                            qed@{0}

@autorefoff
The marked block will be shifted left by a tabwidth as long as there is
enough space left of the cursor, i. e. there is at least a tabwidth of
white space left of the block.

When using real (hard) TABs, one TAB will be deleted.
@autorefon

@endnode


@node "Shift right"
@{U}Shift right                                                           qed@{0}

@autorefoff
This function shifts the marked block by one tabwidth to the right (cf.
Shift @{"Shift left" link "Shift left"}).

When using real (hard) TABs, one TAB will be inserted.
@autorefon

@endnode


@node "Sort"
@{U}Sort                                                                  qed@{0}

You can sort a marked block linewise. Of course this function only makes
sense if you have selected at least two lines as a block.
The dialog displays all affected lines. 
The switch 'Upper bevore lower' defines the value of the upper lettes:
Either @{i}all@{0} upper letters handled less than all lower letters 
(sort result: ABC...abc) or each upper letter handled less than the 
corresponding lower letter (result: AaBbCc...Zz).

As a default entire lines get compared when sorting. If you want to 
restrict the sorting to a distinct range of the line you have to click 
the button 'Range' and mark the appropriate columns within the line that
should control the comparison function.  You have to call the sort 
function again and can start sorting.
The marked block will then get replaced by the sorted text.

National special characters are equivalent to the corresponding 'normal'
character (e.g. Ñ = a, Ä = C) while comparing.

@endnode


@node "UPPER<=>lower"
@{U}UPPER<=>lower                                                         qed@{0}

This function converts each uppercase letter in the marked block to its
lowercase counterpart and vice versa.

@endnode


@node "All to UPPER"
@{U}All to UPPER                                                          qed@{0}

All characters in a block will be converted to uppercase.

@endnode


@node "All to lower"
@{U}All to lower                                                          qed@{0}

All characters in a block will be converted to lowercase.

@endnode


@node "Capitalize"
@{U}Capitalize                                                            qed@{0}

The first letter of every selected word will be converted to uppercase.


@endnode


## *************************************************************************
##  Window
## *************************************************************************

@node "Menu Window"
@{U}Window                                                                qed@{0}

This submenu contains functions dealing with open windows.

@box 3 21 8 0
    Cycle           ^W
    Close           ^U
  @{G}---------------------@{0}
    Top cursor line T
  @{G}---------------------@{0}
    @{"Pile" link "Arrange windows"}
    @{"Column" link "Arrange windows"}
    @{"Row" link "Arrange windows"}

@endnode


@node "Cycle"
@{U}Cycle                                                                 qed@{0}

`Cycle windows' lets you browse through open text windows.

@{"Window cycle global" link Global} active other applications' windows
get included via the VA-protocol if the corresponding programs support the
protocol.

@{"Hidden function" link "Hidden functions" s-cycle}

@endnode


@node "Close"
@{U}Close                                                                 qed@{0}

The top window gets closed.  This function is equivalent to clicking the
close box in the window's top left corner.

@endnode


@node "Top cursor line"
@{U}Top cursor line"                                                      qed@{0}

The line containing the cursor becomes to first line in the window.

@endnode

@node "Arrange windows"
@{U}Arrange windows                                                       qed@{0}

qed supports three different arrangement schemes for open text windows on
the screen. The employed routines for that originate from the editor 7Up 
by Michael ThÑnitz.

    ˘ Pile:

         +-------------------+
         | Window 1          |
         | +--------------------+
         | | Window 2           |
         +-|                    |
           |                    |
           +--------------------+

    ˘ Column:

         +-----------+ +-----------+
         | Window 1  | | Window 2  |
         |           | |           |
         +-----------+ +-----------+

    ˘ Row:

         +----------------------+
         | Window 1             |
         |                      |
         +----------------------+
         +----------------------+
         | Window 2             |
         |                      |
         +----------------------+

@endnode


## *************************************************************************
##  Search
## *************************************************************************

@node "Menu Search"
@{U}Search                                                                qed@{0}

Here you will functions for searching/replacing and for absolute cursor
positioning.

@box 3 26 11 0
   Search/Replace...     ^F
   Again                 ^G
  @{G}--------------------------@{0}
   Search for files...  ^F
  @{G}--------------------------@{0}
   Goto...               ^L
  @{G}--------------------------@{0}
   Set bookmark...       S
   => (Jump to bookmark) ^1
      ...
                         ^5

@endnode


@node "Search/Replace"
@{U}@{"Search/Replace..." ignore}                                                     qed@{0}

@autorefoff
You can apply both Search and Search/Replace to texts.
You can also search the files of a project for a search item.
Finally you can search entire file trees on disk or hard disk for a
specified term.

All of the three methods share the parameters for the text to be searched
for:

   Search:              Insert the pattern to be searched for.  In the
                        popup you can call a history list of the ten last
                        used patterns.
                        Remember that you can insert special character by
                        pressing the INSERT key.  This will display a
                        box with the entire character set.
   Case sensitive:      Distinct between upper and lower case.
   Use wildcards:       Special characters are interpreted as wildcards
                        for a pattern matching algorithm:

                             These characters have a special meaning when
                             using wildcards:
                             *     : any sequence of characters
                             ?     : exactly one character
                             ^xyz  : xyz at beginning of line
                             xyz$  : xyz at end of line
                             [a-z] : any character between a and zglen
                             [^akn]: exactly one character EXCEPT a, k
                                     or n.
                             \@    : Search for @, without produceing the 
                                     GEM bug that deletes the editfield
                                     if '@' is the first character.
   Whole words:         Only complete words are recognized as a match.
   Direction:           Selects the search direction.
   Wrap to top:         When the end of the text buffer is reached, the
                        search will be continued from the start.  The
                        position of this switch is only evaluated for
                        searching.  For replacing it could produce
                        endless loops.
   From begin/cursor:   Select whether the search should begin at the
                        current cursor position or at the beginning of
                        the text buffer.


@{U}Search/Replace in texts@{0}
You can specify a pattern to be inserted for the match and select whether
to replace the first only, some, or all occurences of the pattern.  When
selecting ``Ask'' be prompted for an individual decision at every match:
   'Yes'    Replace and search the next.
   'No'     Do'nt replace and search the next.
   'All'    Stop prompting and replace all following.
   'Quit'   Stop the whole replace operation.
 
In the popup you can call a history list of the ten last used patterns.

If a text region was marked before opening the dialog the first line
of this text will be inserted into the search text edit field.
@autorefon

@{"Search for files or in projects" link "Search for files"}



@endnode

@node "Search for files"
@{U}Search for files or in projects                                       qed@{0}

Both search modes useing the same dialog.

In the upper part of this dialog box you can specify a directory to be
searched through by clicking the button 'choose'.  A file selector
will pop up that lets you choose a directory. The text field `File mask'
lets you restrict the search to certain files using valid qed wildcards
(like '*.[ch]'). The switch 'Search subdirectories' lets you decide
whether to search recursively, i. e. whether files in subdirectories are
included in the search or not.
When searching a project the name of the project is shown at the dialog
and the buttons 'choose' and 'Search subdirectories' are disabled.

The result of both search operation is a new project containing the
files.

@endnode


@node "Again"
@{U}Again                                                                 qed@{0}

@autorefoff
If a text region is marked this text will be used for the next search
operation, which starts immediately.
If no text is selected, the last search operation will be repeated.
The function always starts at the current cursor position and is 
only available for searching in texts. It uses the search direction 
as specified in the dialog box for Search/Replace.
@autorefon

@{"Hidden function" link "Hidden functions" s-again}

@endnode


@node "Goto"
@{U}Goto                                                                  qed@{0}

This function allows to jump to an arbitrary text position.  You can
specify both a line and a column number (both counting from 1).

@endnode


@node "Set bookmark"
@{U}Set bookmark...                                                       qed@{0}

@autorefoff
Set bookmark...  lets you insert up to five labels in the current text.
You can jump to any of these labels with the corresponding menu items.
The bookmarks are not visible in the text.  The line and row number of
the current cursor position is saved internally by qed.
Selecting the menu item will invoke a dialog box that lets you specify an
easy-to-remember name for each bookmark.  This name will be displayed in
the menu.  If you don't specify a name the file name will be displayed
instead.

@autorefon

@endnode


@node "Jump to bookmark"
@{U}Jump to bookmark                                                      qed@{0}

These five menu items place the cursor at the bookmark selected earlier.
If the file containing the bookmark is not already in memory it will be
loaded.

@{"Hidden function" link "Hidden functions" s-bookmark}

@endnode


## *************************************************************************
##  Special
## *************************************************************************

@node "Menu Special"
@{U}Special                                                               qed@{0}

This @{title ignore} contains qed's special features.

@box 3 25 13 0
   Record macro         ^(
   Replay macro         A
   Function keys...     F
  @{G}-------------------------@{0}
   Character set...     ^Z
   Convert 'umlaute'... U
  @{G}-------------------------@{0}
   Error templates...   E
   Jump to error        ^E
  @{G}-------------------------@{0}
   Strip trailing blanks
   TABs => Blanks
   Blanks => TABs

@endnode


@node "Record macro"
@{U}Record macro                                                          qed@{0}

@autorefoff
qed allows to record a sequence of key-strokes and replay it whenever
you want.
To accomplish this first activate the menu item.  Now you can press
arbitrary keys.

During the recording session the words "Makro-Rec" are displayed in the
menu bar in the upright corner of the screen.  When finished, simply
select the menu item again.  The macro is now at your disposal.

A simple example:
To insert a colon (':') at the beginning of every line follow these steps:

(1)  Start the macro recording
(2)  Press the following keys:
   :
   <Cursor left>
   <Cursor down>
   <A> (= <ALTERNATE> + 'a')
(3)  Stop the recording

If you position the cursor at the beginning of the first line and start
playing the macro, the colon will be inserted and the cursor is moved to
the beginning of the next line.  As the last key stroke of the macro was
A (i. e. Replay macro) the same operation is repeated until the end of
the file is reached.
@autorefon

@endnode


@node "Replay macro"
@{U}Replay macro                                                          qed@{0}

This menu items will replay the recorded sequence of key strokes.

You can stop a replay by pressing the ESC-key.  Trying to move the cursor
beyond the first or last line of the text will also cause the replay to
stop.  This effect can be used for endless loops as it easily allows you
to apply a macro to each line of a text.

@{"Hidden function" link "Hidden functions" s-macro}

@endnode


@node "Function keys"
@{U}Function keys...                                                      qed@{0}

qed allows you to apply up to 20 macros to function keys.

First select the function key (F1 - F10 and F11 - F20, the latter refer
to F1 - F10 with the shift key pressed) that you want to define or
undefine by using the popup.
To delete the definition of a function key, simply click the delete
button.
To apply the last recorded macro to a function key, first select a name
and the click on "Macro".
Clicking on "Block" will assign the contents of the clipboard to the
selected key instead.

Remember the following when using block macros:

   ˘ The so-defined macros cannot be saved in the parameter file! qed will
     forget it once the program is finished.  After restarting the program
     it is not available any more.
   ˘ Executing a block macro will replace the contents of the clipboard
     with the macro text, i. e. a block that you copied before calling the
     macro will be lost.

If a function key is not bound to a macro you can pass it through to
the AV-Server via the AV-protocol (-> Global).  This allows you for
instance to start the tools registered in Thing.

@endnode


@node "Character set"
@index "Special character"
@{U}Character set...                                                      qed@{0}

@autorefoff
The character set contains all characters using the window font for
displaying.
Everything can be done with the mouse or keyboard, whichever you prefer:

   ˘ Select a character with the cursor keys
   ˘ Shift-Left/Right jump to start or end of line.
   ˘ HOME jump to first, Shift-HOME to the last character.
   ˘ <RETURN> inserts the character into the text
   ˘ Mouse click on a character inserts it into the text buffer.
   ˘ UNDO selects the Cancel button.

In the bottom part of the selection the ASCII-code of the currently
selected character is displayed in decimal and hexadecimal notation.

You can insert ASCII NULL only in texts that got opened in binary mode.

You can also insert special characters directly with their ASCII code.
While keeping the ALT-key pressed you have to type in the three-digit
decimal value on the keypad.
Under TOS or N.AES the operating system will supply this function.  For
MagiC and other systems that lack this feature, qed will emulate it.

The character set also can be used for inserting special characters
into the edit fields in dialogs. For opening from an edit field press
INSERT.
@autorefon

@endnode


@node "Convert 'umlaute'"
@{U}Converte umlaute...                                                   qed@{0}

@autorefoff
The german language knows some odd characters with two dots on top called
umlaute (éôöÑîÅ) and the so-called eszet (û).  This function lets you
choose the representation of these characters which might be useful when
exchanging texts between different computer platforms.

The most important representations are included in qed.

These representations can be converted in both directions:
   ˘ Atari: Standard Atari-Format
   ˘ ISO-Latin1: Umlaute for ISO-8859-1 8-Bit, for UNIX and Linux
   ˘ Mac: Apple Macintosh
   ˘ PC: IBM-PC 8-Bit

There are three additional formats that can currently be used as targets
only:

   ˘ LaTeX    (Ñ -> "a)
   ˘ HTML     (Ñ -> &auml;)
   ˘ ASCII    (Ñ -> ae)
@autorefon

@{"Hidden function" link "Hidden functions" s-umlaute}

@endnode


@node "Error templates"
@{U}Error templates...                                                    qed@{0}

qed offers a special function for files containing error messages as
produced by most compilers.  If this file contains a file name and a line
number in each line you can right click this line and thus cause qed to
load the corresponding text file and position the cursor in the line the
compiler complained about.  Furthermore the error message will be i
displayed in the info line of the window.

You can define up to six templates for the error lines produced by the
compiler.  Each line has to comply to the compiler-specific format and
may contain the following variables:

  %f  Variable for the file name.  Should the compiler display
      the file name only (without a path) like GNU C and
      others, the file will be searched in the path of the
      error file.
  %z  Variable for the line number.  All positive integers will be
      accepted.
  %s  Variable for the column number (optional).  All positive
      integers will be accepted.
  %t  Variable for the actual error message (optional).  qed expects the
      error message to end at the end of line.

Multiple template defines will be checked subsequently until one matches
the selected line.

Some examples for selected compilers:
STJ Oberon2 : Error %f %z, %s: %t
GNU C/C++   : %f:%z: %t
Pure C      : Error %f %z: %t
              Warning %f %z: %t


@endnode


@node "Jump to error"
@{U}Jump to error                                                         qed@{0}

If the topmost window contains an error file as produced by most
compilers and the cursor is on an error line (cf. Error templates) you
can jump to the appropriate position that contains the error.  qed will
open the file and put the cursor at the error position in the source
file.  Eventually it will display the error message in the info line of
the window.
You can accomplish the same by right-clicking on the error line.

@endnode


@node "Strip trailing blanks"
@{U}Strip trailing blanks                                                 qed@{0}

This function removes all trailing spaces and tabs.  It is only enabled
when the automatic line wrap mode is switched off.

@endnode


@node "TABs => Blanks"
@{U}TABs => blanks                                                        qed@{0}

@autorefoff
This function will replace all TABs (ASCII 9) by the appropriate number
of blanks.  Hence the appearance of the text will not be changed.
The function is only applicable when working with real tabs.
@autorefon

@endnode


@node "Blanks => TABs"
@{U}Blanks => TABs                                                        qed@{0}

@autorefoff
This function will replace a sufficient number of blanks by a tab.  It
is only applicable when working with real tabs.
@autorefon

@endnode

## *************************************************************************
##  Options
## *************************************************************************

@node "Menu Options"
@{U}Options                                                               qed@{0}

Everything that has to do with qed's configuration can be found here.

@box 3 23 14 0
   @{"Insert mode" link "Overwrite mode"}       INS
   Overwrite mode    INS
  @{G}-----------------------@{0}
   Font...            Z
   Global...          G
   Local...           O
   Autosave...
   Bracktes...
   Printer...
  @{G}-----------------------@{0}
   Default project... P
   Insert             Y
  @{G}-----------------------@{0}
   Save setup...      W

@endnode


@node "Overwrite mode"
@{U}@{"Insert/Overwrite" ignore}                                                      qed@{0}

@autorefoff
The menu items will not execute an immediate action but will put qed in a
certain writing mode.  The active mode is indicated by a tick in front of
the menu entry.  Also the appearance of the cursor is affected.  In
insert mode it is a thin line and every text input will be inserted at
the current cursor position, i. e. the text right of the cursor will be
moved to the right.

In overwrite mode instead the cursor appears as a block and the
characters covered by this block will be replaced by every input.
@autorefon

@endnode


@node "Font"
@index "WDIALOG font-selection"
@index Font-protocol
@{U}Font...                                                               qed@{0}

@autorefoff
While working with qed you are not restricted to the system font but you
can use arbitrary fonts assigned to your GDOS.

In version 4.10 qed's own font selection have removed. It looks up for 
different, in the system installed selection programs:

   1. xFSL Cookie, is created e.g. by Calvino. 
   2. FONTSELECT environment variable of the font-protocol.
   3. fnts_do() AES function under MagiC/WDIALOG. 

If a font selection is installed, which supports the font-protocol (e.g. 
Thing), a font can be dragt from the selection on a qed window.

The font-protocol can't use for select the printer font!
@autorefon

@endnode


@node "Global"
@{U}Global...                                                             qed@{0}

This dialog box gives access to the global settings controlling qed's
behavior, i. e. options that apply to all open windows and files.  Most
of them are mentioned or described elsewhere in this document.

   Open binary:
      Lines:                Binary files will open with a fixed
                            line length.
      Extender:             The file extender always will be opened
                            as binary.

   Help program:            Help program that is used to display
                            the online-help.  You can either
                            assign a program or an accessory! To
                            use the online-help you definitely
                            have to use ST-Guide.

   AV-Server:
      Send window cycle:    qed can pass the window cycle through
                            the AV-server.  As a result other
                            applications' windows will cycle, too.
                            If this switch isn't turned on only
                            qed's text windows cycle.
      Send F-keys:          Function keys not bound to a macro
                            will be passed through to the AV-server.

   Gui:
      Auto-save setup:      Parameters (open windows...) are
                            saved automatically on program-
                            termination.
      GEM Clipboard:        Instead of the internal clipboard
                            the GEM-clipboard is being used in
                            order to enable data-exchange with
                            other applications.
      Blinking cursor:      A question of personal taste...
      CTRL-block functions: MS-Dog-like block marking functions
      Ext. printer dialog:  This switch is available when WDIALOG
                            is installed. If activated, qed uses
                            the printer configuration dialogs of
                            WDIALOG.
      Auto-start OLGA:      qed starts OLGA manager automatically.
      Emulate ^(:           Emulates Ctrl-(/) (seperate number block)
                            with Shift-Ctrl-8/9. Nice for keyboards 
                            without a seperate number block.
      Progress bar:         Choose a minimum file size that
                            lets qed display a "progress bar".
      Fore/Background:      With the popups the foreground and
                            background color can be specified.

@endnode


@node "Local"
@{U}Local...                                                              qed@{0}

@autorefoff
Local are options that individually apply to certain files.   
The selected parameters will apply to all files whose names match 
the pattern. The first two entrys cannot be modified. The asterisk
represents all files that don't match any of the defined patterns and
the 'Binary' represents all files that are opened as binary. 
The last entry in the popup "edit" opens the dialog for specify up
18 file-matching patterns.
For each pattern you can specify the following parameters:

  Tabs
    real tabs,                 When no real tabs are being used pressing
    width                      the TAB-key will insert the selected
                               amount of spaces at the cursor position.
                               When using real tabs the width is used
                               for displaying in the window.
  Formatting:
    auto indent                After pressing Return the new line is
                               indented by the same amount of spaces as
                               the above line.
    line formating             Lines are wrapped word-wise at the
                               appropriate position.
    Formatting while loading   Long lines are automatically wrapped when
                               loading a text file.  If qed has wrapped
                               lines while loading, you will get a notice
                               in the window's info line.
    Formatting while inserting When inserting a block, lines are
                               automatically wrapped.
    Line length                The position where to wrap lines.
    show newlines              A carriage return symbol is displayed at
                               the end of each line.
    Break at                   The characters that allow a line-break
                               within a word (e. g. '-').

  Misc
    Backup,                    When saving, qed will create a backup
    Extension                  file with the selected extension.
                               When saving with backup qed will try first
                               to append the selected backup extension
                               entirely at the old name (test.c ->
                               test.c.bak). In case the file system isn't
                               capable to handle the new name the old
                               extension will be replaced by the new one
                               instead (test.c -> test.bak).
    Tag                        Selection of the tag file to use. The
                               assignment of a tag file can be deleted
                               by shift-mouse-clicking the button.
    Words consist of...        The characters a word consists of. qed
                               needs this for word-wise block selection
                               and wrapping.

When using a file system with case-sensitive file names, remember the
following when using wildcards and jokers for filenames:
If a file is loaded from a TOS-partition, the mask will be converted to
uppercase, because only uppercase letters can occur in file names.  When
loading a file from a partition with case-sensitive file names the mask
remains unchanged.
Exclusive use of lowercase letters thus will normally work best.

@index Word delimiters
@index Word elements
@index Character ranges
@index Range operator
@{U}Word elements@{0}
For the setting `Wrap at' and `Word consists of' you can specify 
entire sets of characters that a word possibly consists of. To define
such a range of characters you have to put a hyphen `-' between two 
characters. To cover e.g. all lowercase letters you have to specify 
`a-z'.
If you want to specify the hyphen itself it has to be the first
character in the editfield.  In this case it is not interpreted
as a range operator.
@autorefon

@endnode


@node "Autosave"
@{U}Autosave                                                              qed@{0}

@autorefoff
qed offers the possibility to save modified texts and projects
automatically from time to time.
You can select individual times for texts and projects in a dialog box.
Furthermore you can decide whether qed saves the affected files silently
or prompts you before.  Every time you are prompted, you can choose
between saving, not saving and turning autosave off.
@autorefon

@endnode


@node "Brackets"
@{U}Brackets                                                              qed@{0}

Beside the word orientated marking of text, qed offers the possibility,
to mark the text between two special characters by doubleclicking one
of this special characters.
In the dialog these special characters can be edited. In addition a 
character of start and end must be defined in each case. Usually you 
should enter the different bracket symbols here: 
                     
                      ( { [ <  and  ) } ] >

If a bracket symbol is selected (by doubleclick or ^TAB), qed looks up 
and marks the text which is situated between them as block.  
All characters can be entered, you only must make certain that for each 
start symbol also an end symbol is input (-> in the first editfield always
exactly as many characters to be, as in second).
If start and end symbol are identical, qed looks up only forward (to the 
right and downward). With different characters either forward or backwards
looked up.
As identical symbols offer themselves e.g. " and ', because thereby strings
in source texts will ba able to selected easily. 

With the bracket selection you also can check the levels of brackets in 
e.g. c-source texts well. One click an '{' you can see immediately, where
the appropriate block ends with '}'. 

@endnode


@node "Printer"
@{U}Printer...                                                            qed@{0}

Besides the configuration for the dayly print out you have do setup
the basic printer configuration in this dialog.
qed knows two printing modes: GEMDOS and GDOS.

Printing in GEMDOS mode requires a Wordplusø printer driver in order to
enable qed to print non-ASCII characters correctly. For this driver you
can configure the following features:

   ˘ Paper length:  Sets the number of lines per (print-)page.
   ˘ Line width:    Sets the number of characters per (print-)line
                    (incl. margin!).
   ˘ NLQ:           (Near) Letter Quality
   ˘ Density:       Characters per inch:
                      Pica:       10 cpi (80 characters on DIN A4)
                      Elite:      12 cpi (96 characters on DIN A4)
                      Condensed:  17 cpi (147 characters on DIN A4)

   NOTE: The paper format DIN A4 is a little bit smaller than letter
         legal.

If you want to print via GDOS, qed use the first available GDOS device
(checking for devices 21 .. 30). For GDOS mode you only can configure 
the font that'll used for the print out.

@index "WDIALOG printer dialog"
If you have installed WDIALOG and activated the global setting 'Ext. 
printer dialog', qed uses these dialogs for the printer configuration. 
Then qed adds a sub-dialog to WDIALOG where the qed-specific settings 
can be done. If WDIALOG is used the GEMDOS printer mode is'nt 
available any more!

@endnode


@node "Default project"
@{U}Default project...                                                    qed@{0}

@autorefoff
This menu item lets you choose a project file that can then be accessed
by this entry, i. e. its name is displayed in the menu.

This gives you shorthand access to the project file without using the
file selector box.
@autorefon

@{"Hidden function" link "Hidden functions" s-default}

@endnode


@node "Insert"
@{U}Insert                                                                qed@{0}

The current window will be inserted into the default project.

@endnode


@node "Save setup"
@{U}Save setup                                                            qed@{0}

This function causes qed to save the current setup in a configuration
file (qed.cfg).
This file is `human-readable'.  Each line defines one variable.
If you edit this file manually you should really know what you're doing.

From version 4.0 on qed isn't capable to read the old `default.qed'. To
save your old configuration to the new version you should use the 
program `convert.app'.

Since version 4.5 all screen-dependent settings (window size, position,
font and the opened files) are saved into a seperated file ("xxxxyyyy.qed",
e.g "1280960.qed" for TT high resolution).
The printer settings of WDIALOG are saved into the binary file "pdlg.qed".

@endnode


@node "Shell"
@alias "SE-Protocol"
@{U}Shell                                                                 qed@{0}

@autorefoff
This menu item only makes sense in a multitasking-environment because it
expects a development environment running in a parallel process.
Some clever folks have invented a communications protocol that lets an
editor communicate with a programming shell.  The editor will thus take
control of the shell and can initiate all necessary steps for the program
development (Compiler, Linker, Make, Execute).

When using a development environment that supports the so-called SE-
protocol, you can search this shell from within qed.  If the search was
successful the communication begins and qed switches on all the functions
that the shell understands (qed supports the entire SE-protocol version
1.0, 4 january 1998. If some functions are not selectable it's the shell's
fault).

If the shell needs special makefiles you can select these by the
corresponding menu entry.  The assignment of a makefile can be cancelled
by pressing the SHIFT-key simultaneously.

The communication hasn't necessarily to be initiated by qed.  It will
react to the appropriate message as defined in the protocol when a shell
tries to call the program.
@autorefon

The following programs support this protocol:

   ˘ MM2-Shell by Thomas Tempelmann resp. Dirk Steins
   ˘ Chatwin by Dirk Haun
   ˘ PC-Shell by Frank Storm
   ˘ OWB by Martin Schubert

@endnode

## *************************************************************************
##  Hidden functions
## *************************************************************************

@node "Hidden functions"
@{U}Hidden functions                                                      qed@{0}

Several menu functions will slightly change their behavior when selecting
it with one of the [SHIFT]-keys pressed simultaneously:

@label s-open
File/Open..
   Selected project files will be opened as plain text files.

@label s-merge
File/Merge...
   The selected file @{I}name@{0} will be inserted at the cursor
   position..

@label s-quit
File/Save & Quit...
File/Quit
   The preset for 'Auto-save setup' is being reversed.  If you usually
   save your settings on program termaintion, you can suppress this
   behavior in certain situations.

@label s-clipboard
Edit/Cut
Edit/Copy line
   The clipboard will not be deleted but the block will be appended to
   its contents instead.

@label s-wrap
Edit/Format paragraph
   The entire text will be re-formatted.

@label s-cycle
Window/Cycle
    With the change not only the text but also the project windows are
    considered. 

@label s-again
Search/Again
@autorefoff
   The search direction will be reversed.  The reversion only applies to
   the current operation, i. e. it won't be changed in the corresponding
   dialog box.  The next time Again is called without the SHIFT-key the
   selected search direction will be used again.
@autorefon

@label s-bookmark
Search/=> (Jump to bookmark)
   The assigned bookmark will be deleted.

@label s-macro
Special/Replay macro
   You can select the number of times you want the macro to be replayed
   in a dialog box.

@label s-umlaute
Special/Convert umlaute...
   The last settings for search/replace will be swapped.  This allows you
   to undo the last replacement.

@label s-default
Special/Default project...
   The assigned project will be de-activated.

@endnode

## *************************************************************************
##  Tastaturkommandos
## *************************************************************************
@node "Keystroke commands"
@{U}Keystroke commands                                                    qed@{0}

Besides the keyboard shortcuts for menu functions you can utilize the
following "invisible" keystroke commands
@autorefoff


 @{U}Cursor positioning:@{0}

   , , ,         Move by one line resp. column
   shift , shift   Page up/down
   shift , shift   Move to beginning/end of line
   CTRL , CTRL     Page up/down
   CTRL , CTRL     wordwise left/right
   HOME              Beginning of file
   shift HOME        End of file

   The CTRL-functions aren't available if marking with the CTRL-key is
   switched on.


 @{U}Deleting text:@{0}

   ^Y                Delete line (replace clipboard)
   shift ^Y          Delete line (append to clipboard)
   shift DELETE      Delete from cursor position, wordwise from the
                     right
   shift BACKSPACE   Delete from cursor position, wordwise to the
                     left


 @{U}Miscellaneous:@{0}

   ^TAB              Select word or @{brackets link Bracktes} under cursor.
   HELP              Activate online help.
                     If you have selected a block its contents will be
                     send entirely to the help program.  If you haven't
                     marked anything qed tries to send the word under the
                     cursor.  In all other cases you will end up in this
                     hypertext.  You can see the online help for menu
                     entries if you select the entry with the CTRL-key
                     being pressed.
@index Return value
   Alt-F??           qed does the same as with `Save and exit' but returns
                     the value of the function key to the calling program.
   Alt-Digits        You can insert special @{characters link "Character Set"} on the numerical
                     keypad.

@autorefon
@endnode


 ## *************************************************************************
 ## Block marking functions
 ## *************************************************************************
@node "Block marking functions"
@{U}Block marking functions                                               qed@{0}

qed offers various possibility to mark a part of the text buffer as a
block.
Let's have a look at the mouse functions first:

   ˘ Dragging with the left mouse key pressed will select character-wise.
   ˘ With a doubleclick a word or a bracket be marked.
   ˘ Shift-singleclick marks from the current cursor position to the
     clicked location.
   ˘ Shift-doubleclick resp. doubleclick behind the line end marks the
     entire line.  If you keep the mouse key pressed marking is continued
     line-wise.
   ˘ Should there already be a block marked you can modify the block's
     extensions by pressing the Shift-key and moving the mouse pointer
     with the left mouse key pressed.
   ˘ Position the cursor at the beginning of the block you want to mark
     up.  Then scroll to the desired end of block with the window elements
     and then click the left mouse button while keeping the Shift key
     pressed.  This will highlight the text between the cursor position
     and the position that you clicked upon.

There are two more possibilities for block marking if you prefer the use
of the keyboard.  You can toggle between these modes with a switch
available at the global options.

The first possibility is the menu entry marking (CTRL-B).  When selecting
this function the block extensions will follow the cursor motion.

The second possibility is block marking with the CTRL-key.  This mode
behaves more or less like the block marking functions with MS-dog programs.

@autorefoff
   ˘ Mark the block with CTRL-Up/Down/Left/Right character resp. linewise.
     (with CTRL-Shift side resp. wordwise)
   ˘ Block copying with CTRL-HOME
   ˘ Block delete with CTRL-Delete
   ˘ Block insert with CTRL-Insert
@autorefon

As long as this function is activated the menu entry `Block marking' is a
dummy function.

When a block is marked it will be deleted by inserting new text (by typing
a letter or pasting the clipboard contents)!!

@endnode


## *************************************************************************
##  Tag files
## *************************************************************************
@node "Tag file"
@{U}Tag file                                                              qed@{0}

@autorefoff
qed has a tag replacement system that can replace tags (one to eight
characters) with a string.  These tags and the corresponding
replace strings can be arbitrarily defined by the user in a tag file.

Note: Tags are called "KÅrzel" in German.  Hence some example tag files
      reside in the folder "kurzel" in the original distribution and tag
      files have a default extender .krz.

Each line in a tag file contains of pairs of shortcuts and replace
string.  Left the max.  8-letter shortcut, followed by a '=' and the
string that shall replace the shortcut.  Lines beginning with a '#' are
comments and will be ignored.

The following characters have a special meaning in the replace string:

   ˘ The tilde '~' marks the desired cursor position after the
     expansion.  In case the replace strings doesn't contain a
     tilde the cursor will be places behind the inserted text.
   ˘ The combination '^^' gives you a means to realise multi-line
     tags.
   ˘ The asterisk '*' indicates automatic expansion (see below).

To accomplish an expansion in a text simply press the ESC-key.  If the
text immediately in front of the cursor position (without spaces) matches
any of the defined tags, the expansion will take place.

Automatic tag expansion is another of qed's features.  It is activated by
using '*=' instead of '=' in the assignments in the tag file.  Whenever
the specified text is typed the tag will be expanded.  Please note that
these tags are always expanded, even if they occur inside a word.

@{U}Examples:@{0}

    simple tag:
      bc      =\begin{center}

    multi-line:
      header  =\documentclass{article}^^\usepackage{german}^^

    Cursor positioning:
      bt      =\begin{tabular}{~}

    Automatic expansion:
      ain't   *=isn't
      (Ain't that funny?)

@autorefon

@endnode


 ## *************************************************************************
 ##  Project file
 ## *************************************************************************

@node "Project file"
@{U}Project file                                                          qed@{0}

@autorefoff
Projects offer a possibility to group several files for certain operations.

Currently the only supported operation is the simultaneous search in
multiple files, i. e. searching in a project lets qed search for a
specified term in all files in the project.

There are several ways to create a project.  You can do it manually by
dragging an filename from the desktop or another program supporting the 
Drag&Drop protocol onto the project window. But also the simultaneous 
search in multiple files will create a new project containing all files 
with at least one match.
You can also specify a default project with the corresponding menu entry.
The menu entry Insert will insert individual files into a project.

You can open a file in a project by double clicking on the name in the
project window or by highlighting it with the mouse and then selecting the
menu entry Open.

Additionally you can drag elements from projects via Drag & Drop to other
windows:

   ˘ Insert filenames in another project.
   ˘ Insert filenames into the text buffer when pressing the Shift key
     down.
   ˘ Insert the file's contents into the text buffer when pressing the ALT-
     key down.
   ˘ Drop filenames on an AV-capable desktop.

Within a project window you are not restricted to the use of the mouse.
Some functions can be accessed by the keyboard:

   ˘ The use of the arrow keys turns on a cursor that lets you select
     linewise a certain file.
   ˘ The Return key opens a selected file as a text file.
   ˘ Home resp. Shift-Home positions the cursor at the beginning/end of
     the text buffer.
   ˘ The normal keys can be used as an auto locator:
     When typing in the first characters of a file name, the cursor will
     leap to the first file name that matches the letters you typed in.
     Should there be more than one file name that begins with these
     letters only the first matching one will be selected.  In this case
     you can continue typing letters until the desired file name is
     matched exactly.  As soon as you type a character that isn't a letter
     the text inserted so far will be discarded.
   ˘ With DEL selected item can be removed from the project. 

Project files are simple textual files.  To make qed recognize a text file
as a project file the file name must have the extension `.qpj'.  To open a
project file as a normal text file you have to keep the Shift-key pressed
while opening.
@autorefon

@endnode

## *************************************************************************
##  Kommandozeile
## *************************************************************************
@node "Commandline"
@{U}Commandline                                                           qed@{0}

@alabel ARGV
@index ARGV
qed supports ARGV.  This allows you to pass an arbitrary number of file
names to qed at program startup (of course only if the calling program
supports ARGV, too.

Furhtermore you can pass some options.  Since they refer to the last
specified file you have to adhere to a certain order.

You can also specify the initial cursor position for each file:
 
   qed <filename> [row] [column] ...

@endnode


## *************************************************************************
##  Protocols/cookies
## *************************************************************************

@node "Protocols"
@{U}Supported Protocols, Cookies and Environment                          qed@{0}

qed supports various protocols and messages to communicate with other
applications:


@{U}Messages@{0}

   ˘ VA_START:       When receiving this message the specified file will
                     be loaded and qed answer with AV_STARTED.
                     qed sends this message to ST-Guide for displaying
                     the online help.

   ˘ AP_TERM:        When receiving this message, qed will behave like
                     the user has selected the function Save & Quit.

   ˘ AC_HELP:        qed sends this message to the help program
                     when the HELP-key is pressed after a block has been
                     selected.

   ˘ SC_CHANGED:     This will be send only if the operating system
                     understands the AES-Broadcast-command (currently
                     only MagiC4.0 and AES 4.1).

   ˘ FONT_CHANGED:   Message from the @{font ignore} server (font-protocol).

@{U}Protocols@{0}
@index AV-Protocol
   ˘ AV-Protocol  qed reads the envariable $AVSERVER at start up time.  If
                  it recognizes an AV capable desktop, it enregisters at
                  the desktop and supports the following AV functions:
                    AV_PATH_UPDATE
                           This message will be sent, when qed has changed
                           the contents of the clipboard.  An eventually
                           opened clipboard window can thus be updated.
                    AV_SENDKEY
                           When cycling windows, qed will send this
                           message if @{"Global window cycle" link Global}
                           is active.
                    AV_DRAG_TO_WINDOW
                           You can drag files from projects to the system
                           desktop.
                    VA_DRAGACCWIND
                           This message will send by the AV-server for D&D
                           if @"Global window cycle" link Global} is active.

@index Drag&Drop
   ˘ Drag&Drop:    qed acts as receiver to MultiTOS' and MagiC's
                   Drag & Drop protocol.
                   qed currently reacts upon two file types:
                     ARGS (e. g. files from a Thing-window):
@autorefoff
                        File on text     : Open file in a new window.
                        Path on Text     : Insert path.
                        File on project  : Insert file into project.
@autorefon
                        Path on Project  : File search on path
                                           (equivalent to 'Merge')

                        If you hold down ALT when dragging something 
                        to a text window a menu with various insert 
                        modes pops up.

                     .TXT (e. g. text from a CAT window):
                        Text will be inserted at cursor position.

@index DHST
   ˘ DHST          If StartMeUp is installed, qed will report all document
                   names that got loaded.

@index OLGA
   ˘ OLGA:         If an OLGA manager has been installed, qed will
                   announce itself as a server.

@index SE-Protocol
   ˘ SE-Protocol:  qed supports the SE-protocol (version 1.05) that
                   controls the communication between a programming shell
                   and an editor.


@alabel Cookies
@index Cookies
@{U}Cookies@{0}

   ˘ xFSL:        Font selection.

   ˘ FSEL:        External File selection.  The SELECTRIC-protocol allows
                  to open multiple (max 10) files.


@alabel Environment
@index Environment
@{U}Environment@{0}

qed looks for the parameterfiles qed.cfg, pdlg.qed, display info file and 
the resource file qed.rsc on several paths.

The search order for parameterfiles is:
    (1) in the path of the envariable $QED
    (2) in the path of the envariable $HOME
    (3) in the path $HOME/defaults
    (4) in the path that qed was started from
    (5) in the current directory.

The search order for resource is:
    (1) in the path of the envariable $QED
    (2) in the path that qed was started from
    (3) in the current directory.

qed assumes all filenames to be lowercase only when searching for them on
an adequate file system.

Generally spoken, qed always tries to switch to the MiNT domain and it is
capable to handle filenames with up to 256 characters and paths with a
length of up to 1024 characters.  It also admits all kind of characters
(even spaces) in filenames as long as the operating system supports this,
too.

Furthermore you can use UNIX-paths the like of /usr/etc/... as start
parameters or in envariables.

@endnode


@node "First aid"
@{U}First aid                                                             qed@{0}

Like every decent program qed affords itself a variety of known bugs,
that have resisted to a fix so far.  Don't send me any mails concerning
these bugs, I know them:

   ˘ There are various proportional GDOS-fonts that effect mysterious
     redraw errors.  According to trustworthy experts in the MausNet it's
     the fonts' fault.  Still I don't know why other programs apparently
     have no problems to deal with these fonts.

   ˘ The automatic line wrapping mode contains several bugs.  Since I
     never use this function I never bothered to fix it ;-)

   ˘ There are some problems with font selection "HuGO" and the 
     printer setup dialog of WDAILOG.

@{U}Debug mode@{0}
@index "Debug level"

On several places in qed are debug message inserted which can be 
activated by a special commandline option. All these message go to the 
console.

You can activate the debug mode when starting qed with '--debugXX' as
first argument on the command line. 'XX' specified the debug level:

    1    Turn on the debug mode.
    2    Show some informations about OS.
    4    Dump the argv-list.
    8    One message for each initialized/de-initialized module.
   26    Show all actions via AV protocol. 
   32    Show all actions via SE protocol. 
   64    Show all actions via OLGA.
        
For get more than one information the levels had to be ORed (e.g. 7 for
OS infos and argv-list).


@index "Fatal error"
@{U}Fatal errors@{0}

In some cases qed crashes with an alert like this:

       Internal error Nr: 11
       Please notify the author.

If you get such alerts, please try to reproduce the error that caused the
alert and contact me!

@endnode
